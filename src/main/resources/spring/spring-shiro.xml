<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util.xsd">
	
	<!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:cache/ehcache.xml"/>
    </bean>
    
    <!-- 凭证匹配器 -->
    <!--  
    <bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
        <property name="passwordService" ref="passwordService"/>
    </bean>
    -->
<!--  
	<bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
		<property name="hashService" ref="hashService"></property>
		<property name="hashFormat" ref="hashFormat"></property>
		<property name="hashFormatFactory" ref="hashFormatFactory"></property>
	</bean>
	
	<bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService"></bean>
	
	<bean id="hashFormat" class="org.apache.shiro.crypto.hash.format.Shiro1CryptFormat"></bean>
	
	<bean id="hashFormatFactory" class="org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory"></bean>
-->
    

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 关闭浏览器立即失效-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean name="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="86400000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="staffRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>


    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/staff/login"/>
    </bean>

	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
     	<property name="redirectUrl" value="/staff/login" />
	</bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/staff/login"/>
        <property name="unauthorizedUrl" value="/staff/unauthorized"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter" />
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
            /staff/login=anon
            /staff/userInfo=authc
            /staff/home=authc
	        /staff/logout=logout
	        /staff/unauthorized=anon
	        /staffs/**=perms["staff:all"]
	        /staff/**=perms["staff:all"]
	        /WarehouseInStorageRecord=authc,perms["warehouseInstorage:create"]
	        /WarehouseInStorageRecords=authc,perms[warehouseInstorage:read]
	        /WarehouseInStorageRecord/**=authc,perms[warehouseInstorage:update]
	        /WarehouseProductInventory=authc,perms[warehouseInventory:read]
	        /warehouseDeliveryRecord/**=authc,rest[warehouseDelivery]
	        /warehouseDeliveryRecord=authc,perms[warehouseDelivery:read]
	        /warehouseStatistics=authc,perms[warehouseStatistics:read]
	        /WarehouseOrder=authc,perms[warehouseOrder:create]
	        /WarehouseOrders=authc,perms[warehouseOrder:read]
	        /WarehouseOrder/**=authc,rest[warehouseOrder]
	        /BlowonRecord/blankRecord/**=authc,perms["blankRecord:read"]
	        /BlowonRecord/createBlankRecord=authc,perms["blankRecord:create"]
	        /BlowonRecord/updateBlankRecord/**=authc,perms["blankRecord:update"]
	        /BlowonRecord/getBlankRecord=authc,perms["blankRecord:read"]
	        /BlowonRecord/createBlowonRecord=authc,perms["blowonRecord:create"]
	        /BlowonRecord/updateBlowonRecord/**=authc,perms["blowonRecord:update"]
	        /BlowonRecord/getBlowonRecord=authc,perms["blowonRecord:read"]
	        /CheckWarehouseOthersRecord/getCheckWarehouseOthersRecord=authc,perms["checkWarehouseOthersRecord:read"]
	        /CheckWarehouseOthersRecord/createCheckWarehouseOthersRecord=authc,perms["checkWarehouseOthersRecord:create"]
	        /CheckWarehouseOthersRecord/updateCheckWarehouseOthersRecord/**=authc,perms["checkWarehouseOthersRecord:update"]
	        /CheckWarehouseOthersRecord/createCheckWarehouseProductRecord=authc,perms["checkWarehouseProductRecord:create"]
	        /CheckWarehouseOthersRecord/updateCheckWarehouseProductRecord/**=authc,perms["checkWarehouseProductRecord:update"]
	        /CheckWarehouseOthersRecord/getCheckWarehouseProductRecord=authc,perms["checkWarehouseProductRecord:read"]
	        /FactoryOutStorageRecord/createFactoryOutStorageRecord=authc,perms["factoryOutStorageRecord:create"]
	        /FactoryOutStorageRecord/updateFactoryOutStorageRecord/**=authc,perms["factoryOutStorageRecord:update"]
	        /FactoryOutStorageRecord/getFactoryOutStorageRecord=authc,perms["factoryOutStorageRecord:read"]
	        /FactoryProductInventory/getFactoryProductInventory=authc,perms["factoryProductInventory:read"]
	        /FactoryStatistics/getFactoryStatistics=authc,perms["factoryStatistics:read"]
	        /getAllProduct=authc
	        /ProductModelInfo/getProductModelInfo=authc,perms["productMedelInfo:read"]
	        /ProductModelInfo/createProductModelInfo=authc,perms["productMedelInfo:create"]
	        /ProductModelInfo/updateProductModelInfo/**=authc,perms["productMedelInfo:read"]
	        /ProductModelInfo/productModels=authc
	        /ProductProduce/getProductProduce=authc,perms["productProduce:read"]
	        /ProductProduce/createProductProduce=authc,perms["productProduce:create"]
	        /ProductProduce/updateProductProduce/**=authc,perms["productProduce:update"]
	        /customers = authc,perms["customer:read"]
	        /materialPurchaseRecord = authc,perms["materialPurchaseRecord:all"]        
	        /materialPurchaseRecord/** = authc,perms["materialPurchaseRecord:all"]
	        /materialPurchaseRecords/searchResult = authc,perms["materialPurchaseRecord:read"]
	        /materialPurchaseRecords/** = authc,perms["materialPurchaseRecord:all"]
	        /statisticMaterialRecords = authc,perms["materialPurchaseRecord:all"]
	        /material/inventories = authc,perms["materialInventories:read"]
			/** = anon
            </value>
        </property>
    </bean>
<!-- Realm实现 -->
<!--  
    <bean id="userRealm" class="scut.legend.cg.realm.UserRealm">
        <property name="credentialsMatcher" ref="passwordMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="userService" ref="userService"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
-->
	<bean id="staffRealm" class="scut.legend.cg.realm.StaffRealm">
      <!--   <property name="credentialsMatcher" ref="passwordMatcher"/> --> 
        <property name="cachingEnabled" value="true"/>
        <property name="staffService" ref="staffService"/>
        <!--  
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        -->
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


</beans>